name: 'Download NPM Package Build'
description: 'Downloads NPM package build files directly from the registry'

inputs:
  package-name:
    description: 'Name of the package to download'
    required: true
  version:
    description: 'Version of the package'
    required: false
    default: 'latest'
  output-dir:
    description: 'Directory where the package files should be extracted'
    required: true
  registry-url:
    description: 'Base URL of the npm registry'
    required: false
    default: 'https://registry.npmjs.org'
  token:
    description: 'Authentication token for the registry'
    required: true

runs:
  using: "composite"
  steps:
    - name: Create directories
      shell: bash
      run: |
        mkdir -p "${{ inputs.output-dir }}"
        TEMP_DIR=$(mktemp -d)
        echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV

    - name: Download package
      shell: bash
      run: |
        # Setup .npmrc for authentication
        echo "//npm.pkg.github.com/:_authToken=${{ inputs.token }}" > "$TEMP_DIR/.npmrc"
        echo "@artandrey:registry=https://npm.pkg.github.com" >> "$TEMP_DIR/.npmrc"
        
        # Get package metadata
        SCOPE=$(echo "${{ inputs.package-name }}" | cut -d'/' -f1)
        NAME=$(echo "${{ inputs.package-name }}" | cut -d'/' -f2)
        PACKAGE_URL="${{ inputs.registry-url }}${SCOPE}/${NAME}"
        echo "Fetching package metadata from: $PACKAGE_URL"
        
        # Get package metadata with npm registry headers
        RESPONSE=$(curl -v \
          -H "Accept: application/vnd.npm.install-v1+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          "$PACKAGE_URL")
        echo "Response from registry:"
        echo "$RESPONSE" | jq '.'
        
        # Get the version-specific data
        if [ "${{ inputs.version }}" = "latest" ]; then
          VERSION=$(echo "$RESPONSE" | jq -r '."dist-tags".latest')
          echo "Using latest version: $VERSION"
        else
          VERSION="${{ inputs.version }}"
        fi
        
        # Extract tarball URL from version data
        TARBALL_URL=$(echo "$RESPONSE" | jq -r ".versions[\"$VERSION\"].dist.tarball")
        if [ "$TARBALL_URL" = "null" ] || [ -z "$TARBALL_URL" ]; then
          echo "Error: Could not extract tarball URL from response"
          echo "Available versions:"
          echo "$RESPONSE" | jq '.versions | keys'
          exit 1
        fi
        echo "Downloading from: $TARBALL_URL"
        
        # Download and extract the tarball
        curl -v -L -H "Authorization: Bearer ${{ inputs.token }}" "$TARBALL_URL" -o "$TEMP_DIR/package.tgz"
        
        # Verify download
        if [ ! -f "$TEMP_DIR/package.tgz" ]; then
          echo "Error: Failed to download package tarball"
          exit 1
        fi
        
        cd "$TEMP_DIR"
        echo "Extracting package..."
        tar -xzvf package.tgz
        
        echo "Extracted contents:"
        ls -la
        
        # Move contents from package directory to output
        echo "Moving contents to output directory..."
        mv package/* "${{ inputs.output-dir }}/"
        
        echo "Final package contents:"
        ls -la "${{ inputs.output-dir }}"
        
        # Set output version for reference
        echo "version=$VERSION" >> $GITHUB_OUTPUT 